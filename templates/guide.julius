$(document).on("keydown", ":input:not(textarea)", function(event) {
    if (event.key == "Enter") {
        event.preventDefault();
    }
});

$('#delete-guide').click(function() {
    if(confirm("Are you sure you want to delete this guide?"))
        $.ajax({
            type: "DELETE",
            contentType: "application/json",
            url: "@{GuideR guideId}"
        })
        .done(() => window.location.replace("@{HomeR}"))
        .fail(function (jqXHR, textStatus, errorThrown) {
            console.log(errorThrown + ": " + jqXHR.responseText);
            makeAlertDanger("Something went wrong");
        });
});

$('.toggle-header').click(function() {
    var ix = $(this).data('toggle-ix');
    var toggleSelector = '#' + $(this).data('toggle-id');

    $(this).siblings('.toggle-header').removeClass('active');
    $(this).addClass('active');
    
    $(toggleSelector).find('.active').removeClass('active');
    $(toggleSelector).find('[data-toggle-ix=' + ix + ']').addClass('active');
});

function moveUp(x) {
    var el = $(x);
    if (el.not(':first-child'))
        el.prev().before(el);
}

function moveDown(x) {
    var el = $(x);
    if (el.not(':last-child'))
        el.next().after(el);
}

function moveCompUp(x, moveToIx, leapfrogs, sectionId) {
    var toMove = $(x);
    var movingIx = toMove.data('comp-index');
    var compFound = false;

    $('#' + sectionId).find('.component').each(function() {
        var ix = $(this).data('comp-index');
        if (ix == moveToIx)
        {
            // if comp ix is a divider then move to the previous comp and place after otherwise place before ix
            if (isDivider(this))
            {
                leapfrogs.push(this);
                moveCompUp(x, moveToIx - 1, leapfrogs, sectionId);
            }
            else
            {
                if (leapfrogs.length == 0)
                    placeBefore(toMove, this, leapfrogs);
                else
                    placeAfter(toMove, this, leapfrogs);
            }

            compFound = true;
            return false; // stop iterating
        }
    });

    if (!compFound && leapfrogs.length > 0)
        newRowOrColumn(toMove, leapfrogs);

    gridCleanup();
}

function moveCompDown(x, moveToIx, leapfrogs, sectionId) {
    var toMove = $(x);
    var movingIx = toMove.data('comp-index');
    var compFound = false;

    $('#' + sectionId).find('.component').each(function() {
        var ix = $(this).data('comp-index');
        
        if (ix == moveToIx)
        {
            // if comp ix is a divider then move to the next comp and place before otherwise place after ix
            if (isDivider(this))
            {
                leapfrogs.push(this);
                moveCompDown(x, moveToIx + 1, leapfrogs, sectionId);
            }
            else
            {
                if (leapfrogs.length == 0)
                    placeAfter(toMove, this, leapfrogs);
                else
                    placeBefore(toMove, this, leapfrogs);
            }

            compFound = true;
            return false; // stop iterating
        }
    });

    if (!compFound && leapfrogs.length > 0)
        newRowOrColumn(toMove, leapfrogs);

    gridCleanup();
}

function newRowOrColumn(toMove, leapfrogs) {
    var lastComp = leapfrogs[leapfrogs.length - 1];
    var moveToIx = $(lastComp).data('comp-index');

    if (isColDivider(lastComp))
    {
        var theRow = $(lastComp).parents('.row');
        newCompCol(toMove, moveToIx, theRow, leapfrogs);
    }
    else if (isRowDivider(lastComp))
        newCompRow(toMove, moveToIx, leapfrogs);
}

function isColDivider(comp) {
    return $(comp).hasClass('div-col');
}

function isRowDivider(comp) {
    return $(comp).hasClass('div-row');
}

function isDivider(comp) {
    return isColDivider(comp)
        || isRowDivider(comp);
}

function gridCleanup() {
    $('.col').each(function() {
        if ($(this).children().length == 0)
            $(this).remove();
    });

    $('.row').each(function() {
        if ($(this).children().length == 0)
            $(this).remove();
    });
}

function placeBefore(placeThis, beforeThis, leapfrogs) {
    var placeIx = $(placeThis).data('comp-index');
    var beforeIx = $(beforeThis).data('comp-index');
    var leapfrogDiff = Math.sign(placeIx - beforeIx);

    $(leapfrogs).each(function () {
        var ix = $(this).data('comp-index');
        $(this).data('comp-index', ix + leapfrogDiff);
    });

    if (leapfrogDiff == 1)
    {
        $(beforeThis).data('comp-index', beforeIx + 1);
        $(placeThis).data('comp-index', beforeIx);
    }
    else // -1 or 0
        $(placeThis).data('comp-index', beforeIx + leapfrogDiff);

    $(beforeThis).before(placeThis);
}

function placeAfter(placeThis, afterThis, leapfrogs) {
    var placeIx = $(placeThis).data('comp-index');
    var afterIx = $(afterThis).data('comp-index');
    var leapfrogDiff = Math.sign(placeIx - afterIx);

    $(leapfrogs).each(function () {
        var ix = $(this).data('comp-index');
        $(this).data('comp-index', ix + leapfrogDiff);
    });

    if (leapfrogDiff == 1)
        $(placeThis).data('comp-index', afterIx + 1);
    else // -1 or 0
    {
        $(afterThis).data('comp-index', afterIx + leapfrogDiff);
        $(placeThis).data('comp-index', afterIx);
    }

    $(afterThis).after(placeThis);
}

function newCompCol (comp, moveToIx, theRow, leapfrogs) {
    var newCol = $('<div class=\"col\"/>');
    newCol.append(comp);

    var oldIx = $(comp).data('comp-index');
    $(comp).data('comp-index', moveToIx);

    if (oldIx > moveToIx)
        newCol.prependTo(theRow);
    else
        newCol.appendTo(theRow);

    var leapfrogDiff = Math.sign(oldIx - moveToIx);
    $(leapfrogs).each(function () {
        var ix = $(this).data('comp-index');
        $(this).data('comp-index', ix + leapfrogDiff);
    });
}

function newCompRow (comp, moveToIx, leapfrogs) {
    var sectionContent = $(comp).parents('.section-content');
    var newRow = $('<div class="row no-gutters"/>');
    var newCol = $('<div class="col"/>');
    newCol.append(comp);
    newRow.append(newCol);

    var oldIx = $(comp).data('comp-index');
    $(comp).data('comp-index', moveToIx);

    if (oldIx > moveToIx)
        sectionContent.prepend(newRow);
    else
        sectionContent.append(newRow);

    var leapfrogDiff = Math.sign(oldIx - moveToIx);    
    $(leapfrogs).each(function () {
        var ix = $(this).data('comp-index');
        $(this).data('comp-index', ix + leapfrogDiff);
    });
}