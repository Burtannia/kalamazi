$(document).on("keydown", ":input:not(textarea)", function(event) {
    if (event.key == "Enter") {
        event.preventDefault();
    }
});

$('#delete-guide').click(function() {
    if(confirm("Are you sure you want to delete this guide?"))
        $.ajax({
            type: "DELETE",
            contentType: "application/json",
            url: "@{GuideR guideId}"
        })
        .done(() => window.location.replace("@{HomeR}"))
        .fail(function (jqXHR, textStatus, errorThrown) {
            console.log(errorThrown + ": " + jqXHR.responseText);
            makeAlertDanger("Something went wrong");
        });
});

$('.toggle-header').click(function() {
    var ix = $(this).data('toggle-ix');
    var toggleSelector = '#' + $(this).data('toggle-id');

    $(this).siblings('.toggle-header').removeClass('active');
    $(this).addClass('active');
    
    $(toggleSelector).find('.active').removeClass('active');
    $(toggleSelector).find('[data-toggle-ix=' + ix + ']').addClass('active');
});

function moveUp(x) {
    var el = $(x);
    if (el.not(':first-child'))
        el.prev().before(el);
}

function moveDown(x) {
    var el = $(x);
    if (el.not(':last-child'))
        el.next().after(el);
}

function moveCompUp(x, moveToIx, leapfrogs) {
    console.log(leapfrogs);
    var toMove = $(x);
    var movingIx = toMove.data('comp-index');

    $('.component').each(function() {
        var ix = $(this).data('comp-index');
        
        if (ix == moveToIx)
        {
            // if comp ix is a divider then move to the previous comp and place after otherwise place before ix
            if (isDivider(this))
            {
                leapfrogs.push(this);
                moveCompUp(x, moveToIx - 1, leapfrogs);
            }
            else
            {
                if (leapfrogs.length == 0)
                    placeBefore(toMove, this, leapfrogs);
                else
                    placeAfter(toMove, this, leapfrogs);
            }

            return false; // stop iterating
        }
    });
}

function moveCompDown(x, moveToIx, leapfrogs) {
    console.log(leapfrogs);
    var toMove = $(x);
    var movingIx = toMove.data('comp-index');

    $('.component').each(function() {
        var ix = $(this).data('comp-index');
        
        if (ix == moveToIx)
        {
            // if comp ix is a divider then move to the next comp and place before otherwise place after ix
            if (isDivider(this))
            {
                leapfrogs.push(this);
                moveCompDown(x, moveToIx + 1, leapfrogs);
            }
            else
            {
                if (leapfrogs.length == 0)
                    placeAfter(toMove, this, leapfrogs);
                else
                    placeBefore(toMove, this, leapfrogs);
            }

            return false; // stop iterating
        }
    });
}

function isDivider(comp) {
    return $(comp).hasClass('divider');
}

function placeBefore(placeThis, beforeThis, leapfrogs) {
    var placeIx = $(placeThis).data('comp-index');
    var beforeIx = $(beforeThis).data('comp-index');
    var leapfrogDiff = Math.sign(placeIx - beforeIx);

    console.log("Place Ix: " + placeIx);
    console.log("Before Ix: " + beforeIx);
    console.log("Diff: " + leapfrogDiff);
    console.log("Leapfrogs: " + leapfrogs.length);

    $(leapfrogs).each(function () {
        var ix = $(this).data('comp-index');
        $(this).data('comp-index', ix + leapfrogDiff);
        $(this).attr('data-comp-index', ix + leapfrogDiff);
    });

    if (leapfrogDiff == 1)
    {
        $(beforeThis).data('comp-index', beforeIx + 1);
        $(beforeThis).attr('data-comp-index', beforeIx + 1);

        $(placeThis).data('comp-index', beforeIx);
        $(placeThis).attr('data-comp-index', beforeIx);
    }
    else // -1 or 0
    {
        $(placeThis).data('comp-index', beforeIx + leapfrogDiff);
        $(placeThis).attr('data-comp-index', beforeIx + leapfrogDiff);
    }

    $(beforeThis).before(placeThis);
}

function placeAfter(placeThis, afterThis, leapfrogs) {
    var placeIx = $(placeThis).data('comp-index');
    var afterIx = $(afterThis).data('comp-index');
    var leapfrogDiff = Math.sign(placeIx - afterIx);

    console.log("Place Ix: " + placeIx);
    console.log("After Ix: " + afterIx);
    console.log("Diff: " + leapfrogDiff);
    console.log("Leapfrogs: " + leapfrogs.length);

    $(leapfrogs).each(function () {
        var ix = $(this).data('comp-index');
        $(this).data('comp-index', ix + leapfrogDiff);
        $(this).attr('data-comp-index', ix + leapfrogDiff);
    });

    if (leapfrogDiff == 1)
    {
        $(placeThis).data('comp-index', afterIx + 1);
        $(placeThis).attr('data-comp-index', afterIx + 1);
    }
    else // -1 or 0
    {
        $(afterThis).data('comp-index', afterIx + leapfrogDiff);
        $(afterThis).attr('data-comp-index', afterIx + leapfrogDiff);

        $(placeThis).data('comp-index', afterIx);
        $(placeThis).attr('data-comp-index', afterIx);
    }

    $(afterThis).after(placeThis);
}